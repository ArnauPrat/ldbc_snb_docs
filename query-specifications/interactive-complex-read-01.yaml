workload: Interactive
operation: complex
number: 1
title: Friends with certain name
description: |
  Given a start *Person*, find *Persons* with a given first name (`firstName`) that the start *Person* is connected to (excluding start *Person*) by at most 3 steps via the *knows* relationships. Return *Persons*, including the distance (1..3), summaries of the *Persons* workplaces and places of study.
parameters:
  - name: Person.id
    type: ID
    description: "`personId`"
  - name: Person.firstName
    type: String
    description: "`firstName`"
result:
  - name: Person.id
    type: ID
    description: "`friendId`"
  - name: Person.lastName
    type: String
    description: "`friendLastName`"
  - name: distanceFromPerson
    type: 32-bit Integer
    description: "`distanceFromPerson`"
    category: calculated
  - name: Person.birthday
    type: Date
    description: "`friendBirthday`"
  - name: Person.creationDate
    type: DateTime
    description: "`friendCreationDate`"
  - name: Person.gender
    type: String
    description: "`friendGender`"
  - name: Person.browserUsed
    type: String
    description: "`friendBrowserUsed`"
  - name: Person.locationIP
    type: String
    description: "`friendLocationIp`"
  - name: \{Person.email\}
    type: \{Long String\}
    description: "`friendEmails`"
  - name: \{Person.speaks\}
    type: \{String\}
    description: "`friendLanguages`"
  - name: Person-isLocatedIn->City.name
    type: String
    description: "`friendCityName`"
  - name: \{\<Person-studyAt->University.name, Person-studyAt->.classYear, Person-studyAt->University-isLocatedIn->City.name>\}
    type: \{\<String, 32-bit Integer, String>\}
    description: "`friendUniversities`"
    category: aggregated
  - name: \{\<Person-workAt->Company.name, Person-workAt->.workFrom, Person-workAt->Company-isLocatedIn->Country.name>\}
    type: \{\<String, 32-bit Integer, String>\}
    description: "`friendCompanies`"
    category: aggregated
sort:
  - name: distanceFromPerson
    direction: asc
  - name: Person.lastName
    direction: asc
  - name: Person.id
    direction: asc
limit: 20
choke_points: [2.1, 5.3, 8.2]
relevance: |
  This query is a representative of a simple navigational query. It looks for paths of length 1..3 through the knows relation, starting from a given *Person* and ending at a *Person* with a given first name. It is interesting for several aspects.
  (1) It requires for a complex aggregation for returning the concatenation of universities, companies, languages and email information of the *Person*.
  (2) It tests the ability of the optimizer to move the evaluation of sub-queries functionally dependant on the *Person*, after the evaluation of the top-k.
  (3) Its performance is highly sensitive to properly estimating the cardinalities in each transitive path, and paying attention not to explore already visited *Persons*.
