workload: BI
operation: read
number: 19
title: Interaction path between cities
description: |
  Given two *Cities* `city1`, `city2`, find *Persons* `person1`, `person2` living in these *Cities* (respectively) with the shortest **interaction path** between them.

  The shortest path is computed using a weight between two *Persons* defined as the reciprocal of the number of interactions (direct reply *Comments* to a *Message* by the other *Person*). Therefore, more interactions imply a smaller weight.

  Note: Interactions are counted both ways, i.e. if Alice writes 2 reply Comments to Bob's Messages and Bob writes 3 reply Comments to Alice's Messages, their number of interactions is 5.
parameters:
  - name: city1Id
    type: ID
  - name: city2Id
    type: ID
result:
  - name: person1.id
    type: ID
  - name: person2.id
    type: ID
  - name: totalWeight
    type: 32-bit Float
    category: calculated
sort:
  - name: totalWeight
    direction: desc
  - name: person1.id
    direction: asc
    description: The order of paths with the same `totalWeight` is unspecified
limit: 20
choke_points: [1.1] #todo
relevance: |
  Finding shortest paths between pairs of *Persons* in *Cities* can be implemented in theory with an _all-pair shortest paths_ algorithm. However, this needs to be executed on the whole *Person-knows-Person* graph (with edge weights derived from the number of interactions) so it is expected to be prohibitively slow. A better approach is using multiple _single-source shortest path algorithms_ (e.g. from the *City* with fewer inhibitants).
