workload: BI
operation: read
number: 20
title: Recruitment
description: |
  Consider *knows* edges where the endpoint *Persons* attended the same *University* and set the weight of the edge to the absolute difference between the year of enrolment plus 1. If the *Persons* attended multiple universities, we select the smallest (`min`) value.
  Formally: `min_{saA, saB} (abs(saA.classYear - saB.classYear)) + 1`.

  Given a *Company* `company` and a *Person* `person2` (who is not working and has not worked at `company`), find a different *Person* (`person1`) who works or at some point worked in `company` and is reachable from `person2` through people who have studied together through the shortest weighted path.
    
  If there are multiple *Person* `person1` nodes with the same shortest path length, return all of them.

  Due to the inaccuracies of floating point number representation, the comparisons to determine same length paths should be performed with a tolerance of 10e-5.
parameters:
  - name: company
    type: Long String
    description: |
      *Companies* with a similar number of employees (former or current) are selected
  - name: person2Id
    type: ID
    description: |
      `(A)` there is guaranteed to be no path between any `person1` working at `company` and `person2`

      `(B)` there is guaranteed to be a 2-hop path between at least one `person1` working at `company` and `person`.
result:
  - name: person1.id
    type: ID
  - name: totalWeight
    type: 64-bit Integer
    category: calculated
sort:
  - name: totalWeight
    direction: asc
  - name: person1.id
    direction: asc
limit: 20
choke_points: [3.3, 7.6, 7.7, 8.4, 8.6]
relevance: |
  Implementations can either pre-compute edge weights or compute them on-the-fly.

  To find the (weighted) shortest path efficiently, the system can use e.g. a bidirectional Dijkstra algorithm.
