workload: BI
operation: read
number: 20
title: Recruitment
description: |
  Consider *knows* edges where the endpoint *Persons* attended the same *University* and set the weight of the edge to the absolute difference between the year of enrolment plus 1. If the *Persons* attended multiple universities, we select the smallest (`min`) value.
  Formally:
  $$
  w = \min_{\textsf{studyAt}_\textsf{A}, \textsf{studyAt}_\textsf{B}}
    \left|
      \textsf{studyAt}_\textsf{A}.\textsf{classYear} -
      \textsf{studyAt}_\textsf{B}.\textsf{classYear}
    \right|
    + 1
  $$

  Given a `$company` and a *Person* `person2` with ID `$person2Id` (who is not working and has not worked at `$company`), find a different *Person* (`person1`) who works or at some point worked in `$company` and is reachable from `person2` through people who have studied together through the shortest weighted path.
    
  If there are multiple *Person* `person1` nodes with the same shortest path length, return all of them.
parameters:
  - name: company
    type: Long String
    description: |
      *Companies* with a similar number of employees (former or current) are selected
  - name: person2Id
    type: ID
    description: |
      `(a)` there is guaranteed to be no path between any `person1` working at `company` and `person2`

      `(b)` there is guaranteed to be a 2-hop path between at least one `person1` working at `company` and `person`.
result:
  - name: person1.id
    type: ID
  - name: totalWeight
    type: 32-bit Integer
    category: calculated
sort:
  - name: totalWeight
    direction: asc
  - name: person1.id
    direction: asc
limit: 20
choke_points: [3.3, 7.6, 7.7, 8.4, 8.6]
relevance: |
  To find the weighted shortest paths efficiently, the system can use e.g. a bidirectional Dijkstra algorithm.
  As the edge weights do not depend on any parameter, systems can pre-compute them (if they do not interleave reads and writes).
